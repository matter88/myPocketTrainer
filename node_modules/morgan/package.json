{
  "_from": "morgan",
  "_id": "morgan@1.9.0",
  "_inBundle": false,
  "_integrity": "sha1-0B+mxlhZt2/PMbPLU6OCGjEdgFE=",
  "_location": "/morgan",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "morgan",
    "fetchSpec": "latest",
    "name": "morgan",
    "raw": "morgan",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/morgan/-/morgan-1.9.0.tgz",
  "_shasum": "d01fa6c65859b76fcf31b3cb53a3821a311d8051",
  "_shrinkwrap": null,
  "_spec": "morgan",
  "_where": "/Users/hoangnguyen/Coding/react/calorieCounter",
  "bugs": {
    "url": "https://github.com/expressjs/morgan/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "email": "doug@somethingdoug.com",
      "name": "Douglas Christopher Wilson"
    },
    {
      "email": "me@jongleberry.com",
      "name": "Jonathan Ong",
      "url": "http://jongleberry.com"
    }
  ],
  "dependencies": {
    "basic-auth": "~2.0.0",
    "debug": "2.6.9",
    "depd": "~1.1.1",
    "on-finished": "~2.3.0",
    "on-headers": "~1.0.1"
  },
  "deprecated": false,
  "description": "HTTP request logger middleware for node.js",
  "devDependencies": {
    "eslint": "3.19.0",
    "eslint-config-standard": "10.2.1",
    "eslint-plugin-import": "2.7.0",
    "eslint-plugin-markdown": "1.0.0-beta.6",
    "eslint-plugin-node": "5.1.1",
    "eslint-plugin-promise": "3.5.0",
    "eslint-plugin-standard": "3.0.1",
    "istanbul": "0.4.5",
    "mocha": "2.5.3",
    "split": "1.0.1",
    "supertest": "1.1.0"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "files": [
    "LICENSE",
    "HISTORY.md",
    "README.md",
    "index.js"
  ],
  "homepage": "https://github.com/expressjs/morgan#readme",
  "keywords": [
    "express",
    "http",
    "logger",
    "middleware"
  ],
  "license": "MIT",
  "name": "morgan",
  "optionalDependencies": {},
  "readme": "# morgan\r\n\r\n[![NPM Version][npm-image]][npm-url]\r\n[![NPM Downloads][downloads-image]][downloads-url]\r\n[![Build Status][travis-image]][travis-url]\r\n[![Test Coverage][coveralls-image]][coveralls-url]\r\n[![Gratipay][gratipay-image]][gratipay-url]\r\n\r\nHTTP request logger middleware for node.js\r\n\r\n> Named after [Dexter](http://en.wikipedia.org/wiki/Dexter_Morgan), a show you should not watch until completion.\r\n\r\n## API\r\n\r\n<!-- eslint-disable no-unused-vars -->\r\n\r\n```js\r\nvar morgan = require('morgan')\r\n```\r\n\r\n### morgan(format, options)\r\n\r\nCreate a new morgan logger middleware function using the given `format` and `options`.\r\nThe `format` argument may be a string of a predefined name (see below for the names),\r\na string of a format string, or a function that will produce a log entry.\r\n\r\nThe `format` function will be called with three arguments `tokens`, `req`, and `res`,\r\nwhere `tokens` is an object with all defined tokens, `req` is the HTTP request and `res`\r\nis the HTTP response. The function is expected to return a string that will be the log\r\nline, or `undefined` / `null` to skip logging.\r\n\r\n#### Using a predefined format string\r\n\r\n<!-- eslint-disable no-undef -->\r\n\r\n```js\r\nmorgan('tiny')\r\n```\r\n\r\n#### Using format string of predefined tokens\r\n\r\n<!-- eslint-disable no-undef -->\r\n\r\n```js\r\nmorgan(':method :url :status :res[content-length] - :response-time ms')\r\n```\r\n\r\n#### Using a custom format function\r\n\r\n<!-- eslint-disable no-undef -->\r\n\r\n``` js\r\nmorgan(function (tokens, req, res) {\r\n  return [\r\n    tokens.method(req, res),\r\n    tokens.url(req, res),\r\n    tokens.status(req, res),\r\n    tokens.res(req, res, 'content-length'), '-',\r\n    tokens['response-time'](req, res), 'ms'\r\n  ].join(' ')\r\n})\r\n```\r\n\r\n#### Options\r\n\r\nMorgan accepts these properties in the options object.\r\n\r\n##### immediate\r\n\r\nWrite log line on request instead of response. This means that a requests will\r\nbe logged even if the server crashes, _but data from the response (like the\r\nresponse code, content length, etc.) cannot be logged_.\r\n\r\n##### skip\r\n\r\nFunction to determine if logging is skipped, defaults to `false`. This function\r\nwill be called as `skip(req, res)`.\r\n\r\n<!-- eslint-disable no-undef -->\r\n\r\n```js\r\n// EXAMPLE: only log error responses\r\nmorgan('combined', {\r\n  skip: function (req, res) { return res.statusCode < 400 }\r\n})\r\n```\r\n\r\n##### stream\r\n\r\nOutput stream for writing log lines, defaults to `process.stdout`.\r\n\r\n#### Predefined Formats\r\n\r\nThere are various pre-defined formats provided:\r\n\r\n##### combined\r\n\r\nStandard Apache combined log output.\r\n\r\n```\r\n:remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length] \":referrer\" \":user-agent\"\r\n```\r\n\r\n##### common\r\n\r\nStandard Apache common log output.\r\n\r\n```\r\n:remote-addr - :remote-user [:date[clf]] \":method :url HTTP/:http-version\" :status :res[content-length]\r\n```\r\n\r\n##### dev\r\n\r\nConcise output colored by response status for development use. The `:status`\r\ntoken will be colored red for server error codes, yellow for client error\r\ncodes, cyan for redirection codes, and uncolored for all other codes.\r\n\r\n```\r\n:method :url :status :response-time ms - :res[content-length]\r\n```\r\n\r\n##### short\r\n\r\nShorter than default, also including response time.\r\n\r\n```\r\n:remote-addr :remote-user :method :url HTTP/:http-version :status :res[content-length] - :response-time ms\r\n```\r\n\r\n##### tiny\r\n\r\nThe minimal output.\r\n\r\n```\r\n:method :url :status :res[content-length] - :response-time ms\r\n```\r\n\r\n#### Tokens\r\n\r\n##### Creating new tokens\r\n\r\nTo define a token, simply invoke `morgan.token()` with the name and a callback function.\r\nThis callback function is expected to return a string value. The value returned is then\r\navailable as \":type\" in this case:\r\n\r\n<!-- eslint-disable no-undef -->\r\n\r\n```js\r\nmorgan.token('type', function (req, res) { return req.headers['content-type'] })\r\n```\r\n\r\nCalling `morgan.token()` using the same name as an existing token will overwrite that\r\ntoken definition.\r\n\r\nThe token function is expected to be called with the arguments `req` and `res`, representing\r\nthe HTTP request and HTTP response. Additionally, the token can accept further arguments of\r\nit's choosing to customize behavior.\r\n\r\n##### :date[format]\r\n\r\nThe current date and time in UTC. The available formats are:\r\n\r\n  - `clf` for the common log format (`\"10/Oct/2000:13:55:36 +0000\"`)\r\n  - `iso` for the common ISO 8601 date time format (`2000-10-10T13:55:36.000Z`)\r\n  - `web` for the common RFC 1123 date time format (`Tue, 10 Oct 2000 13:55:36 GMT`)\r\n\r\nIf no format is given, then the default is `web`.\r\n\r\n##### :http-version\r\n\r\nThe HTTP version of the request.\r\n\r\n##### :method\r\n\r\nThe HTTP method of the request.\r\n\r\n##### :referrer\r\n\r\nThe Referrer header of the request. This will use the standard mis-spelled Referer header if exists, otherwise Referrer.\r\n\r\n##### :remote-addr\r\n\r\nThe remote address of the request. This will use `req.ip`, otherwise the standard `req.connection.remoteAddress` value (socket address).\r\n\r\n##### :remote-user\r\n\r\nThe user authenticated as part of Basic auth for the request.\r\n\r\n##### :req[header]\r\n\r\nThe given `header` of the request.\r\n\r\n##### :res[header]\r\n\r\nThe given `header` of the response.\r\n\r\n##### :response-time[digits]\r\n\r\nThe time between the request coming into `morgan` and when the response\r\nheaders are written, in milliseconds.\r\n\r\nThe `digits` argument is a number that specifies the number of digits to\r\ninclude on the number, defaulting to `3`, which provides microsecond precision.\r\n\r\n##### :status\r\n\r\nThe status code of the response.\r\n\r\nIf the request/response cycle completes before a response was sent to the\r\nclient (for example, the TCP socket closed prematurely by a client aborting\r\nthe request), then the status will be empty (displayed as `\"-\"` in the log).\r\n\r\n##### :url\r\n\r\nThe URL of the request. This will use `req.originalUrl` if exists, otherwise `req.url`.\r\n\r\n##### :user-agent\r\n\r\nThe contents of the User-Agent header of the request.\r\n\r\n### morgan.compile(format)\r\n\r\nCompile a format string into a `format` function for use by `morgan`. A format string\r\nis a string that represents a single log line and can utilize token syntax.\r\nTokens are references by `:token-name`. If tokens accept arguments, they can\r\nbe passed using `[]`, for example: `:token-name[pretty]` would pass the string\r\n`'pretty'` as an argument to the token `token-name`.\r\n\r\nThe function returned from `morgan.compile` takes three arguments `tokens`, `req`, and\r\n`res`, where `tokens` is object with all defined tokens, `req` is the HTTP request and\r\n`res` is the HTTP response. The function will return a string that will be the log line,\r\nor `undefined` / `null` to skip logging.\r\n\r\nNormally formats are defined using `morgan.format(name, format)`, but for certain\r\nadvanced uses, this compile function is directly available.\r\n\r\n## Examples\r\n\r\n### express/connect\r\n\r\nSimple app that will log all request in the Apache combined format to STDOUT\r\n\r\n```js\r\nvar express = require('express')\r\nvar morgan = require('morgan')\r\n\r\nvar app = express()\r\n\r\napp.use(morgan('combined'))\r\n\r\napp.get('/', function (req, res) {\r\n  res.send('hello, world!')\r\n})\r\n```\r\n\r\n### vanilla http server\r\n\r\nSimple app that will log all request in the Apache combined format to STDOUT\r\n\r\n```js\r\nvar finalhandler = require('finalhandler')\r\nvar http = require('http')\r\nvar morgan = require('morgan')\r\n\r\n// create \"middleware\"\r\nvar logger = morgan('combined')\r\n\r\nhttp.createServer(function (req, res) {\r\n  var done = finalhandler(req, res)\r\n  logger(req, res, function (err) {\r\n    if (err) return done(err)\r\n\r\n    // respond to request\r\n    res.setHeader('content-type', 'text/plain')\r\n    res.end('hello, world!')\r\n  })\r\n})\r\n```\r\n\r\n### write logs to a file\r\n\r\n#### single file\r\n\r\nSimple app that will log all requests in the Apache combined format to the file\r\n`access.log`.\r\n\r\n```js\r\nvar express = require('express')\r\nvar fs = require('fs')\r\nvar morgan = require('morgan')\r\nvar path = require('path')\r\n\r\nvar app = express()\r\n\r\n// create a write stream (in append mode)\r\nvar accessLogStream = fs.createWriteStream(path.join(__dirname, 'access.log'), {flags: 'a'})\r\n\r\n// setup the logger\r\napp.use(morgan('combined', {stream: accessLogStream}))\r\n\r\napp.get('/', function (req, res) {\r\n  res.send('hello, world!')\r\n})\r\n```\r\n\r\n#### log file rotation\r\n\r\nSimple app that will log all requests in the Apache combined format to one log\r\nfile per day in the `log/` directory using the\r\n[rotating-file-stream module](https://www.npmjs.com/package/rotating-file-stream).\r\n\r\n```js\r\nvar express = require('express')\r\nvar fs = require('fs')\r\nvar morgan = require('morgan')\r\nvar path = require('path')\r\nvar rfs = require('rotating-file-stream')\r\n\r\nvar app = express()\r\nvar logDirectory = path.join(__dirname, 'log')\r\n\r\n// ensure log directory exists\r\nfs.existsSync(logDirectory) || fs.mkdirSync(logDirectory)\r\n\r\n// create a rotating write stream\r\nvar accessLogStream = rfs('access.log', {\r\n  interval: '1d', // rotate daily\r\n  path: logDirectory\r\n})\r\n\r\n// setup the logger\r\napp.use(morgan('combined', {stream: accessLogStream}))\r\n\r\napp.get('/', function (req, res) {\r\n  res.send('hello, world!')\r\n})\r\n```\r\n\r\n### split / dual logging\r\n\r\nThe `morgan` middleware can be used as many times as needed, enabling\r\ncombinations like:\r\n\r\n  * Log entry on request and one on response\r\n  * Log all requests to file, but errors to console\r\n  * ... and more!\r\n\r\nSample app that will log all requests to a file using Apache format, but\r\nerror responses are logged to the console:\r\n\r\n```js\r\nvar express = require('express')\r\nvar fs = require('fs')\r\nvar morgan = require('morgan')\r\nvar path = require('path')\r\n\r\nvar app = express()\r\n\r\n// log only 4xx and 5xx responses to console\r\napp.use(morgan('dev', {\r\n  skip: function (req, res) { return res.statusCode < 400 }\r\n}))\r\n\r\n// log all requests to access.log\r\napp.use(morgan('common', {\r\n  stream: fs.createWriteStream(path.join(__dirname, 'access.log'), {flags: 'a'})\r\n}))\r\n\r\napp.get('/', function (req, res) {\r\n  res.send('hello, world!')\r\n})\r\n```\r\n\r\n### use custom token formats\r\n\r\nSample app that will use custom token formats. This adds an ID to all requests and displays it using the `:id` token.\r\n\r\n```js\r\nvar express = require('express')\r\nvar morgan = require('morgan')\r\nvar uuid = require('node-uuid')\r\n\r\nmorgan.token('id', function getId (req) {\r\n  return req.id\r\n})\r\n\r\nvar app = express()\r\n\r\napp.use(assignId)\r\napp.use(morgan(':id :method :url :response-time'))\r\n\r\napp.get('/', function (req, res) {\r\n  res.send('hello, world!')\r\n})\r\n\r\nfunction assignId (req, res, next) {\r\n  req.id = uuid.v4()\r\n  next()\r\n}\r\n```\r\n\r\n## License\r\n\r\n[MIT](LICENSE)\r\n\r\n[npm-image]: https://img.shields.io/npm/v/morgan.svg\r\n[npm-url]: https://npmjs.org/package/morgan\r\n[travis-image]: https://img.shields.io/travis/expressjs/morgan/master.svg\r\n[travis-url]: https://travis-ci.org/expressjs/morgan\r\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/morgan/master.svg\r\n[coveralls-url]: https://coveralls.io/r/expressjs/morgan?branch=master\r\n[downloads-image]: https://img.shields.io/npm/dm/morgan.svg\r\n[downloads-url]: https://npmjs.org/package/morgan\r\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg\r\n[gratipay-url]: https://www.gratipay.com/dougwilson/\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/expressjs/morgan.git"
  },
  "scripts": {
    "lint": "eslint --plugin markdown --ext js,md .",
    "test": "mocha --check-leaks --reporter spec --bail",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --check-leaks --reporter dot",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --check-leaks --reporter spec"
  },
  "version": "1.9.0"
}
