{
  "_from": "css-loader",
  "_id": "css-loader@0.28.8",
  "_inBundle": false,
  "_integrity": "sha512-4jGj7Ag6WUZ5lQyE4te9sJLn0lgkz6HI3WDE4aw98AkW1IAKXPP4blTpPeorlLDpNsYvojo0SYgRJOdz2KbuAw==",
  "_location": "/css-loader",
  "_phantomChildren": {
    "big.js": "3.2.0",
    "emojis-list": "2.1.0",
    "json5": "0.5.1"
  },
  "_requested": {
    "escapedName": "css-loader",
    "fetchSpec": "latest",
    "name": "css-loader",
    "raw": "css-loader",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/css-loader/-/css-loader-0.28.8.tgz",
  "_shasum": "ff36381464dea18fe60f2601a060ba6445886bd5",
  "_shrinkwrap": null,
  "_spec": "css-loader",
  "_where": "/Users/hoangnguyen/Coding/react/calorieCounter",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bugs": {
    "url": "https://github.com/webpack-contrib/css-loader/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "babel-code-frame": "^6.26.0",
    "css-selector-tokenizer": "^0.7.0",
    "cssnano": "^3.10.0",
    "icss-utils": "^2.1.0",
    "loader-utils": "^1.0.2",
    "lodash.camelcase": "^4.3.0",
    "object-assign": "^4.1.1",
    "postcss": "^5.0.6",
    "postcss-modules-extract-imports": "^1.1.0",
    "postcss-modules-local-by-default": "^1.2.0",
    "postcss-modules-scope": "^1.1.0",
    "postcss-modules-values": "^1.3.0",
    "postcss-value-parser": "^3.3.0",
    "source-list-map": "^2.0.0"
  },
  "deprecated": false,
  "description": "css loader module for webpack",
  "devDependencies": {
    "codecov": "^1.0.1",
    "eslint": "3.14.0",
    "istanbul": "^0.4.5",
    "mocha": "^3.2.0",
    "should": "^11.1.2",
    "standard-version": "^4.0.0"
  },
  "engines": {
    "node": ">=0.12.0 || >= 4.3.0 < 5.0.0 || >=5.10"
  },
  "files": [
    "lib",
    "index.js",
    "locals.js"
  ],
  "homepage": "https://github.com/webpack-contrib/css-loader",
  "license": "MIT",
  "name": "css-loader",
  "optionalDependencies": {},
  "readme": "[![npm][npm]][npm-url]\r\n[![node][node]][node-url]\r\n[![deps][deps]][deps-url]\r\n[![tests][tests]][tests-url]\r\n[![coverage][cover]][cover-url]\r\n[![chat][chat]][chat-url]\r\n\r\n<div align=\"center\">\r\n  <img width=\"180\" height=\"180\" vspace=\"20\"\r\n    src=\"https://cdn.worldvectorlogo.com/logos/css-3.svg\">\r\n  <a href=\"https://github.com/webpack/webpack\">\r\n    <img width=\"200\" height=\"200\"\r\n      src=\"https://webpack.js.org/assets/icon-square-big.svg\">\r\n  </a>\r\n  <h1>CSS Loader</h1>\r\n</div>\r\n\r\n<h2 align=\"center\">Install</h2>\r\n\r\n```bash\r\nnpm install --save-dev css-loader\r\n```\r\n\r\n<h2 align=\"center\">Usage</h2>\r\n\r\nThe `css-loader` interprets `@import` and `url()` like `import/require()`\r\nand will resolve them.\r\n\r\nGood loaders for requiring your assets are the [file-loader](https://github.com/webpack/file-loader)\r\nand the [url-loader](https://github.com/webpack/url-loader) which you should specify in your config (see [below](https://github.com/webpack-contrib/css-loader#assets)).\r\n\r\n**file.js**\r\n```js\r\nimport css from 'file.css';\r\n```\r\n\r\n**webpack.config.js**\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.css$/,\r\n        use: [ 'style-loader', 'css-loader' ]\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n### `toString`\r\n\r\nYou can also use the css-loader results directly as string, such as in Angular's component style.\r\n\r\n**webpack.config.js**\r\n```js\r\n{\r\n   test: /\\.css$/,\r\n   use: [\r\n     'to-string-loader',\r\n     'css-loader'\r\n   ]\r\n}\r\n```\r\n\r\nor\r\n\r\n```js\r\nconst css = require('./test.css').toString();\r\n\r\nconsole.log(css); // {String}\r\n```\r\n\r\nIf there are SourceMaps, they will also be included in the result string.\r\n\r\nIf, for one reason or another, you need to extract CSS as a\r\nplain string resource (i.e. not wrapped in a JS module) you\r\nmight want to check out the [extract-loader](https://github.com/peerigon/extract-loader).\r\nIt's useful when you, for instance, need to post process the CSS as a string.\r\n\r\n**webpack.config.js**\r\n```js\r\n{\r\n   test: /\\.css$/,\r\n   use: [\r\n     'handlebars-loader', // handlebars loader expects raw resource string\r\n     'extract-loader',\r\n     'css-loader'\r\n   ]\r\n}\r\n```\r\n\r\n<h2 align=\"center\">Options</h2>\r\n\r\n|Name|Type|Default|Description|\r\n|:--:|:--:|:-----:|:----------|\r\n|**[`root`](#root)**|`{String}`|`/`|Path to resolve URLs, URLs starting with `/` will not be translated|\r\n|**[`url`](#url)**|`{Boolean}`|`true`| Enable/Disable `url()` handling|\r\n|**[`alias`](#alias)**|`{Object}`|`{}`|Create aliases to import certain modules more easily|\r\n|**[`import`](#import)** |`{Boolean}`|`true`| Enable/Disable @import handling|\r\n|**[`modules`](#modules)**|`{Boolean}`|`false`|Enable/Disable CSS Modules|\r\n|**[`minimize`](#minimize)**|`{Boolean\\|Object}`|`false`|Enable/Disable minification|\r\n|**[`sourceMap`](#sourcemap)**|`{Boolean}`|`false`|Enable/Disable Sourcemaps|\r\n|**[`camelCase`](#camelcase)**|`{Boolean\\|String}`|`false`|Export Classnames in CamelCase|\r\n|**[`importLoaders`](#importloaders)**|`{Number}`|`0`|Number of loaders applied before CSS loader|\r\n|**`localIdentName`**|`{String}`|`[hash:base64]`|Configure the generated ident|\r\n\r\n### `root`\r\n\r\nFor URLs that start with a `/`, the default behavior is to not translate them.\r\n\r\n`url(/image.png) => url(/image.png)`\r\n\r\nIf a `root` query parameter is set, however, it will be prepended to the URL\r\nand then translated.\r\n\r\n**webpack.config.js**\r\n```js\r\n{\r\n  loader: 'css-loader',\r\n  options: { root: '.' }\r\n}\r\n```\r\n\r\n`url(/image.png)` => `require('./image.png')`\r\n\r\nUsing 'Root-relative' urls is not recommended. You should only use it for legacy CSS files.\r\n\r\n### `url`\r\n\r\nTo disable `url()` resolving by `css-loader` set the option to `false`.\r\n\r\nTo be compatible with existing css files (if not in CSS Module mode).\r\n\r\n```\r\nurl(image.png) => require('./image.png')\r\nurl(~module/image.png) => require('module/image.png')\r\n```\r\n\r\n### `alias`\r\n\r\nRewrite your urls with alias, this is useful when it's hard to change url paths of your input files, for example, when you're using some css / sass files in another package (bootstrap, ratchet, font-awesome, etc.).\r\n\r\n`css-loader`'s `alias` follows the same syntax as webpack's `resolve.alias`, you can see the details at the [resolve docs](https://webpack.js.org/configuration/resolve/#resolve-alias)\r\n\r\n**file.scss**\r\n```css\r\n@charset \"UTF-8\";\r\n@import \"bootstrap\";\r\n```\r\n\r\n**webpack.config.js**\r\n```js\r\n{\r\n  test: /\\.scss$/,\r\n  use: [\r\n    {\r\n      loader: \"style-loader\"\r\n    },\r\n    {\r\n      loader: \"css-loader\",\r\n      options: {\r\n        alias: {\r\n          \"../fonts/bootstrap\": \"bootstrap-sass/assets/fonts/bootstrap\"\r\n        }\r\n      }\r\n    },\r\n    {\r\n      loader: \"sass-loader\",\r\n      options: {\r\n        includePaths: [\r\n          path.resolve(\"./node_modules/bootstrap-sass/assets/stylesheets\")\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nCheck out this [working bootstrap example](https://github.com/bbtfr/webpack2-bootstrap-sass-sample).\r\n\r\n### `import`\r\n\r\nTo disable `@import` resolving by `css-loader` set the option to `false`\r\n\r\n```css\r\n@import url('https://fonts.googleapis.com/css?family=Roboto');\r\n```\r\n\r\n> _⚠️ Use with caution, since this disables resolving for **all** `@import`s, including css modules `composes: xxx from 'path/to/file.css'` feature._\r\n\r\n### [`modules`](https://github.com/css-modules/css-modules)\r\n\r\nThe query parameter `modules` enables the **CSS Modules** spec.\r\n\r\nThis enables local scoped CSS by default. (You can switch it off with `:global(...)` or `:global` for selectors and/or rules.).\r\n\r\n#### `Scope`\r\n\r\nBy default CSS exports all classnames into a global selector scope. Styles can be locally scoped to avoid globally scoping styles.\r\n\r\nThe syntax `:local(.className)` can be used to declare `className` in the local scope. The local identifiers are exported by the module.\r\n\r\nWith `:local` (without brackets) local mode can be switched on for this selector. `:global(.className)` can be used to declare an explicit global selector. With `:global` (without brackets) global mode can be switched on for this selector.\r\n\r\nThe loader replaces local selectors with unique identifiers. The choosen unique identifiers are exported by the module.\r\n\r\n```css\r\n:local(.className) { background: red; }\r\n:local .className { color: green; }\r\n:local(.className .subClass) { color: green; }\r\n:local .className .subClass :global(.global-class-name) { color: blue; }\r\n```\r\n\r\n```css\r\n._23_aKvs-b8bW2Vg3fwHozO { background: red; }\r\n._23_aKvs-b8bW2Vg3fwHozO { color: green; }\r\n._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1 { color: green; }\r\n._23_aKvs-b8bW2Vg3fwHozO ._13LGdX8RMStbBE9w-t0gZ1 .global-class-name { color: blue; }\r\n```\r\n\r\n> :information_source: Identifiers are exported\r\n\r\n```js\r\nexports.locals = {\r\n  className: '_23_aKvs-b8bW2Vg3fwHozO',\r\n  subClass: '_13LGdX8RMStbBE9w-t0gZ1'\r\n}\r\n```\r\n\r\nCamelCase is recommended for local selectors. They are easier to use in the within the imported JS module.\r\n\r\n`url()` URLs in block scoped (`:local .abc`) rules behave like requests in modules.\r\n\r\n```\r\nfile.png => ./file.png\r\n~module/file.png => module/file.png\r\n```\r\n\r\nYou can use `:local(#someId)`, but this is not recommended. Use classes instead of ids.\r\nYou can configure the generated ident with the `localIdentName` query parameter (default `[hash:base64]`).\r\n\r\n **webpack.config.js**\r\n ```js\r\n{\r\n  test: /\\.css$/,\r\n  use: [\r\n    {\r\n      loader: 'css-loader',\r\n      options: {\r\n        modules: true,\r\n        localIdentName: '[path][name]__[local]--[hash:base64:5]'\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\n\r\nYou can also specify the absolute path to your custom `getLocalIdent` function to generate classname based on a different schema. This requires `webpack >= 2.2.1` (it supports functions in the `options` object).\r\n\r\n**webpack.config.js**\r\n```js\r\n{\r\n  loader: 'css-loader',\r\n  options: {\r\n    modules: true,\r\n    localIdentName: '[path][name]__[local]--[hash:base64:5]',\r\n    getLocalIdent: (context, localIdentName, localName, options) => {\r\n      return 'whatever_random_class_name'\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n> :information_source: For prerendering with extract-text-webpack-plugin you should use `css-loader/locals` instead of `style-loader!css-loader` **in the prerendering bundle**. It doesn't embed CSS but only exports the identifier mappings.\r\n\r\n#### `Composing`\r\n\r\nWhen declaring a local classname you can compose a local class from another local classname.\r\n\r\n```css\r\n:local(.className) {\r\n  background: red;\r\n  color: yellow;\r\n}\r\n\r\n:local(.subClass) {\r\n  composes: className;\r\n  background: blue;\r\n}\r\n```\r\n\r\nThis doesn't result in any change to the CSS itself but exports multiple classnames.\r\n\r\n```js\r\nexports.locals = {\r\n  className: '_23_aKvs-b8bW2Vg3fwHozO',\r\n  subClass: '_13LGdX8RMStbBE9w-t0gZ1 _23_aKvs-b8bW2Vg3fwHozO'\r\n}\r\n```\r\n\r\n``` css\r\n._23_aKvs-b8bW2Vg3fwHozO {\r\n  background: red;\r\n  color: yellow;\r\n}\r\n\r\n._13LGdX8RMStbBE9w-t0gZ1 {\r\n  background: blue;\r\n}\r\n```\r\n\r\n#### `Importing`\r\n\r\nTo import a local classname from another module.\r\n\r\n```css\r\n:local(.continueButton) {\r\n  composes: button from 'library/button.css';\r\n  background: red;\r\n}\r\n```\r\n\r\n```css\r\n:local(.nameEdit) {\r\n  composes: edit highlight from './edit.css';\r\n  background: red;\r\n}\r\n```\r\n\r\nTo import from multiple modules use multiple `composes:` rules.\r\n\r\n```css\r\n:local(.className) {\r\n  composes: edit hightlight from './edit.css';\r\n  composes: button from 'module/button.css';\r\n  composes: classFromThisModule;\r\n  background: red;\r\n}\r\n```\r\n\r\n### `minimize`\r\n\r\nBy default the css-loader minimizes the css if specified by the module system.\r\n\r\nIn some cases the minification is destructive to the css, so you can provide your own options to the cssnano-based minifier if needed. See [cssnano's documentation](http://cssnano.co/guides/) for more information on the available options.\r\n\r\nYou can also disable or enforce minification with the `minimize` query parameter.\r\n\r\n**webpack.config.js**\r\n```js\r\n{\r\n  loader: 'css-loader',\r\n  options: {\r\n    minimize: true || {/* CSSNano Options */}\r\n  }\r\n}\r\n```\r\n\r\n### `sourceMap`\r\n\r\nTo include source maps set the `sourceMap` option.\r\n\r\nI. e. the extract-text-webpack-plugin can handle them.\r\n\r\nThey are not enabled by default because they expose a runtime overhead and increase in bundle size (JS source maps do not). In addition to that relative paths are buggy and you need to use an absolute public path which include the server URL.\r\n\r\n**webpack.config.js**\r\n```js\r\n{\r\n  loader: 'css-loader',\r\n  options: {\r\n    sourceMap: true\r\n  }\r\n}\r\n```\r\n\r\n### `camelCase`\r\n\r\nBy default, the exported JSON keys mirror the class names. If you want to camelize class names (useful in JS), pass the query parameter `camelCase` to css-loader.\r\n\r\n|Name|Type|Description|\r\n|:--:|:--:|:----------|\r\n|**`true`**|`{Boolean}`|Class names will be camelized|\r\n|**`'dashes'`**|`{String}`|Only dashes in class names will be camelized|\r\n|**`'only'`** |`{String}`|Introduced in `0.27.1`. Class names will be camelized, the original class name will be removed from the locals|\r\n|**`'dashesOnly'`**|`{String}`|Introduced in `0.27.1`. Dashes in class names will be camelized, the original class name will be removed from the locals|\r\n\r\n**file.css**\r\n```css\r\n.class-name {}\r\n```\r\n\r\n**file.js**\r\n```js\r\nimport { className } from 'file.css';\r\n```\r\n\r\n**webpack.config.js**\r\n```js\r\n{\r\n  loader: 'css-loader',\r\n  options: {\r\n    camelCase: true\r\n  }\r\n}\r\n```\r\n\r\n### `importLoaders`\r\n\r\nThe query parameter `importLoaders` allows to configure how many loaders before `css-loader` should be applied to `@import`ed resources.\r\n\r\n**webpack.config.js**\r\n```js\r\n{\r\n  test: /\\.css$/,\r\n  use: [\r\n    'style-loader',\r\n    {\r\n      loader: 'css-loader',\r\n      options: {\r\n        importLoaders: 2 // 0 => no loaders (default); 1 => postcss-loader; 2 => postcss-loader, sass-loader\r\n      }\r\n    },\r\n    'postcss-loader',\r\n    'sass-loader'\r\n  ]\r\n}\r\n```\r\n\r\nThis may change in the future, when the module system (i. e. webpack) supports loader matching by origin.\r\n\r\n<h2 align=\"center\">Examples</h2>\r\n\r\n### Assets\r\n\r\nThe following `webpack.config.js` can load CSS files, embed small PNG/JPG/GIF/SVG images as well as fonts as [Data URLs](https://tools.ietf.org/html/rfc2397) and copy larger files to the output directory.\r\n\r\n**webpack.config.js**\r\n```js\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.css$/,\r\n        use: [ 'style-loader', 'css-loader' ]\r\n      },\r\n      {\r\n        test: /\\.(png|jpg|gif|svg|eot|ttf|woff|woff2)$/,\r\n        loader: 'url-loader',\r\n        options: {\r\n          limit: 10000\r\n        }\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\n### Extract\r\n\r\nFor production builds it's recommended to extract the CSS from your bundle being able to use parallel loading of CSS/JS resources later on. This can be achieved by using the [extract-text-webpack-plugin](https://github.com/webpack-contrib/extract-text-webpack-plugin) to extract the CSS when running in production mode.\r\n\r\n**webpack.config.js**\r\n```js\r\nconst env = process.env.NODE_ENV\r\n\r\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\r\n\r\nmodule.exports = {\r\n  module: {\r\n    rules: [\r\n      {\r\n        test: /\\.css$/,\r\n        use: env === 'production'\r\n          ? ExtractTextPlugin.extract({\r\n              fallback: 'style-loader',\r\n              use: [ 'css-loader' ]\r\n          })\r\n          : [ 'style-loader', 'css-loader' ]\r\n      },\r\n    ]\r\n  },\r\n  plugins: env === 'production'\r\n    ? [\r\n        new ExtractTextPlugin({\r\n          filename: '[name].css'\r\n        })\r\n      ]\r\n    : []\r\n}\r\n```\r\n\r\n<h2 align=\"center\">Maintainers</h2>\r\n\r\n<table>\r\n  <tbody>\r\n    <tr>\r\n      <td align=\"center\">\r\n        <img width=\"150\" height=\"150\"\r\n        src=\"https://github.com/bebraw.png?v=3&s=150\">\r\n        </br>\r\n        <a href=\"https://github.com/bebraw\">Juho Vepsäläinen</a>\r\n      </td>\r\n      <td align=\"center\">\r\n        <img width=\"150\" height=\"150\"\r\n        src=\"https://github.com/d3viant0ne.png?v=3&s=150\">\r\n        </br>\r\n        <a href=\"https://github.com/d3viant0ne\">Joshua Wiens</a>\r\n      </td>\r\n      <td align=\"center\">\r\n        <img width=\"150\" height=\"150\"\r\n        src=\"https://github.com/SpaceK33z.png?v=3&s=150\">\r\n        </br>\r\n        <a href=\"https://github.com/SpaceK33z\">Kees Kluskens</a>\r\n      </td>\r\n      <td align=\"center\">\r\n        <img width=\"150\" height=\"150\"\r\n        src=\"https://github.com/TheLarkInn.png?v=3&s=150\">\r\n        </br>\r\n        <a href=\"https://github.com/TheLarkInn\">Sean Larkin</a>\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\">\r\n        <img width=\"150\" height=\"150\"\r\n        src=\"https://github.com/michael-ciniawsky.png?v=3&s=150\">\r\n        </br>\r\n        <a href=\"https://github.com/michael-ciniawsky\">Michael Ciniawsky</a>\r\n      </td>\r\n      <td align=\"center\">\r\n        <img width=\"150\" height=\"150\"\r\n        src=\"https://github.com/evilebottnawi.png?v=3&s=150\">\r\n        </br>\r\n        <a href=\"https://github.com/evilebottnawi\">Evilebot Tnawi</a>\r\n      </td>\r\n      <td align=\"center\">\r\n        <img width=\"150\" height=\"150\"\r\n        src=\"https://github.com/joscha.png?v=3&s=150\">\r\n        </br>\r\n        <a href=\"https://github.com/joscha\">Joscha Feth</a>\r\n      </td>\r\n    </tr>\r\n  <tbody>\r\n</table>\r\n\r\n\r\n[npm]: https://img.shields.io/npm/v/css-loader.svg\r\n[npm-url]: https://npmjs.com/package/css-loader\r\n\r\n[node]: https://img.shields.io/node/v/css-loader.svg\r\n[node-url]: https://nodejs.org\r\n\r\n[deps]: https://david-dm.org/webpack-contrib/css-loader.svg\r\n[deps-url]: https://david-dm.org/webpack-contrib/css-loader\r\n\r\n[tests]: http://img.shields.io/travis/webpack-contrib/css-loader.svg\r\n[tests-url]: https://travis-ci.org/webpack-contrib/css-loader\r\n\r\n[cover]: https://codecov.io/gh/webpack-contrib/css-loader/branch/master/graph/badge.svg\r\n[cover-url]: https://codecov.io/gh/webpack-contrib/css-loader\r\n\r\n[chat]: https://badges.gitter.im/webpack/webpack.svg\r\n[chat-url]: https://gitter.im/webpack/webpack\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/webpack-contrib/css-loader.git"
  },
  "scripts": {
    "cover": "istanbul cover node_modules/mocha/bin/_mocha",
    "lint": "eslint lib test",
    "release": "standard-version",
    "test": "mocha",
    "test:cover": "npm run cover -- --report lcovonly",
    "travis:lint": "npm run lint",
    "travis:test": "npm run cover"
  },
  "version": "0.28.8"
}
